// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider   = "prisma-client-js"
  output     = "../.prisma/client"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

// example table used in the express router example

// schema.prisma
// making Edges table
// 2 columns:
// StartNodeID which is a VARCHAR (mixed datatype)
// endNodeID which is a VARCHAR as well
model Edges {
  EdgeID      String @id // EdgeID column in Edges table
  StartNodeID String // StartNodeID column in Edges table
  EndNodeID   String // EndNodeID column in Edges table
}

// making Nodes table
// 8 Columns:
// nodeID which is a string
// xcoord which is a 4digit CHAR
// ycoord which is a 3-4 digit CHAR
// floor 2 digit CHAR
// building is a string
// nodetype is a string
// longname is a string
// shortName is a string

model Nodes {
  NodeID    String           @id
  Xcoord    String
  Ycoord    String
  Floor     String
  Building  String
  NodeType  String
  LongName  String
  ShortName String
  Requests  GeneralRequest[]
}

//--------------- Iteration 5 -----------------------------

// userID which is an autoincrement number and the primary key
// name is the doctor's name
// department is the primary department that the doctor works in
// years worked is the number of years of experience as a doctor
// rating is the doctor's rating, which we assumed to be the average across many sites
// specialty training is a boolean for whether the doctor has specialty training in their field
// boardCertification is a boolean for whether the doctor is board certified
// languages is a list of strings for the languages that the doctor is proficient/fluent in

model Doctor {
  userID             Int      @id
  name               String
  department         String
  yearsWorked        Int
  rating             Decimal  @db.Decimal(3, 2)
  specialtyTraining  Boolean
  boardCertification Boolean
  languages          String[]
}

//--------------- Iteration 4 -----------------------------

// userID which is a String and the primary key
// email which is the employee's email
// emailVerified is a boolean of whether the employee verified their email
// nickname is the name of the employee
// lastLogin is the time the employee last logged in

model Employee {
  userID        String           @id
  email         String
  emailVerified Boolean
  nickname      String
  updatedAt     DateTime
  Requests      GeneralRequest[]
}

//--------------- Iteration 2 -----------------------------

// making General Request table
// 10 Columns:
// RequestID which is an Int
// RequesterName which is a string of the person making the request
// RequestType which is a string
// Priority which is a string (low, medium, high, emergency)
// Location which is a Node Object
// LocationNodeID is a string which specifies the Node ID of the location of the Node
// Employee which is an Employee Object
// EmployeeName which is the specific name of the employee
// Details1 which is a string of whatever important details dependent on type of request
// Details2 which is a string of whatever important details dependent on type of request
// Details3 which is a string of whatever important details dependent on type of request
// DeliveryDate which is a DateTime of whatever the delievery date is supposed to be
// Status which is a string of either (Unassigned, Assigned, InProgress, or Closed)

model GeneralRequest {
  RequestID      Int      @id @default(autoincrement())
  RequesterName  String
  RequestType    String
  Priority       String
  Location       Nodes    @relation(fields: [LocationNodeID], references: [NodeID], onDelete: Cascade)
  LocationNodeID String
  Employee       Employee @relation(fields: [EmployeeID], references: [userID], onDelete: Cascade)
  EmployeeID     String
  Details1       String
  Details2       String
  Details3       String
  DeliveryDate   DateTime
  Status         String
}

//-----------------------------OLD-----------------------------

// model Request {
//   RequestID     Int      @id @default(autoincrement())
//   Time          DateTime
//   Type          String
//   Details       String
//   UserID        Int // USE RELATION FOR LATER ITERATION (When we need to make a Users table)
//   Destination   Nodes    @relation(fields: [DestinationID], references: [LongName])
//   DestinationID String
// }

// npx prisma generate for schema. can see using database
// npx prisma migrate dev --name init to run the code to add to a database. will overwrite anything in public.

// model Request {
//   RequestID     Int      @id @default(autoincrement())
//   Time          DateTime
//   Type          String
//   Details       String
//   UserID        Int // USE RELATION FOR LATER ITERATION (When we need to make a Users table)
//   Destination   Nodes    @relation(fields: [DestinationID], references: [NodeID])
//   DestinationID String
// }

// model FlowerRequest {
//   RequestID         Int      @id @default(autoincrement())
//   Time              DateTime
//   DeliveryDate      DateTime
//   RecipientName     String
//   FlowerType        String
//   UserID            Int // USE RELATION FOR LATER ITERATION (When we need to make a Users table)
//   Destination       Nodes    @relation(fields: [DestinationNodeID], references: [NodeID])
//   DestinationNodeID String
// }

// npx prisma generate for schema. can see using database
// npx prisma migrate dev --name init to run the code to add to a database. will overwrite anything in public.
